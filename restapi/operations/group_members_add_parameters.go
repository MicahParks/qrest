// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewGroupMembersAddParams creates a new GroupMembersAddParams object
//
// There are no default values defined in the spec.
func NewGroupMembersAddParams() GroupMembersAddParams {

	return GroupMembersAddParams{}
}

// GroupMembersAddParams contains all the bound params for the group members add operation
// typically these are obtained from a http.Request
//
// swagger:parameters groupMembersAdd
type GroupMembersAddParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*The name of the quota-group to add members to.
	  Required: true
	  In: path
	*/
	Group string
	/*The names of the snaps and member quota-groups to add to the group.
	  In: body
	*/
	Members GroupMembersAddBody
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGroupMembersAddParams() beforehand.
func (o *GroupMembersAddParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	rGroup, rhkGroup, _ := route.Params.GetOK("group")
	if err := o.bindGroup(rGroup, rhkGroup, route.Formats); err != nil {
		res = append(res, err)
	}

	if runtime.HasBody(r) {
		defer r.Body.Close()
		var body GroupMembersAddBody
		if err := route.Consumer.Consume(r.Body, &body); err != nil {
			res = append(res, errors.NewParseError("members", "body", "", err))
		} else {
			// validate body object
			if err := body.Validate(route.Formats); err != nil {
				res = append(res, err)
			}

			ctx := validate.WithOperationRequest(context.Background())
			if err := body.ContextValidate(ctx, route.Formats); err != nil {
				res = append(res, err)
			}

			if len(res) == 0 {
				o.Members = body
			}
		}
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindGroup binds and validates parameter Group from path.
func (o *GroupMembersAddParams) bindGroup(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.Group = raw

	return nil
}
