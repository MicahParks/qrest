// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/mvo5/qrest-skeleton/models"
)

// GroupLimitReadOKCode is the HTTP code returned for type GroupLimitReadOK
const GroupLimitReadOKCode int = 200

/*GroupLimitReadOK The map of quota-group names to resource limits.

swagger:response groupLimitReadOK
*/
type GroupLimitReadOK struct {

	/*
	  In: Body
	*/
	Payload map[string]models.Limits `json:"body,omitempty"`
}

// NewGroupLimitReadOK creates GroupLimitReadOK with default headers values
func NewGroupLimitReadOK() *GroupLimitReadOK {

	return &GroupLimitReadOK{}
}

// WithPayload adds the payload to the group limit read o k response
func (o *GroupLimitReadOK) WithPayload(payload map[string]models.Limits) *GroupLimitReadOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the group limit read o k response
func (o *GroupLimitReadOK) SetPayload(payload map[string]models.Limits) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GroupLimitReadOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty map
		payload = make(map[string]models.Limits, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

/*GroupLimitReadDefault Unexpected error.

swagger:response groupLimitReadDefault
*/
type GroupLimitReadDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGroupLimitReadDefault creates GroupLimitReadDefault with default headers values
func NewGroupLimitReadDefault(code int) *GroupLimitReadDefault {
	if code <= 0 {
		code = 500
	}

	return &GroupLimitReadDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the group limit read default response
func (o *GroupLimitReadDefault) WithStatusCode(code int) *GroupLimitReadDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the group limit read default response
func (o *GroupLimitReadDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the group limit read default response
func (o *GroupLimitReadDefault) WithPayload(payload *models.Error) *GroupLimitReadDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the group limit read default response
func (o *GroupLimitReadDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GroupLimitReadDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
