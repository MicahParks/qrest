// Code generated by go-swagger; DO NOT EDIT.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/mvo5/qrest-skeleton/models"
)

// GroupLimitWriteOKCode is the HTTP code returned for type GroupLimitWriteOK
const GroupLimitWriteOKCode int = 200

/*GroupLimitWriteOK The resource limits were successfully set for the quota-group.

swagger:response groupLimitWriteOK
*/
type GroupLimitWriteOK struct {
}

// NewGroupLimitWriteOK creates GroupLimitWriteOK with default headers values
func NewGroupLimitWriteOK() *GroupLimitWriteOK {

	return &GroupLimitWriteOK{}
}

// WriteResponse to the client
func (o *GroupLimitWriteOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

/*GroupLimitWriteDefault Unexpected error.

swagger:response groupLimitWriteDefault
*/
type GroupLimitWriteDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGroupLimitWriteDefault creates GroupLimitWriteDefault with default headers values
func NewGroupLimitWriteDefault(code int) *GroupLimitWriteDefault {
	if code <= 0 {
		code = 500
	}

	return &GroupLimitWriteDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the group limit write default response
func (o *GroupLimitWriteDefault) WithStatusCode(code int) *GroupLimitWriteDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the group limit write default response
func (o *GroupLimitWriteDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the group limit write default response
func (o *GroupLimitWriteDefault) WithPayload(payload *models.Error) *GroupLimitWriteDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the group limit write default response
func (o *GroupLimitWriteDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GroupLimitWriteDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
