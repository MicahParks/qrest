// Code generated by go-swagger; DO NOT EDIT.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GroupUsageHandlerFunc turns a function with the right signature into a group usage handler
type GroupUsageHandlerFunc func(GroupUsageParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GroupUsageHandlerFunc) Handle(params GroupUsageParams) middleware.Responder {
	return fn(params)
}

// GroupUsageHandler interface for that can handle valid group usage params
type GroupUsageHandler interface {
	Handle(GroupUsageParams) middleware.Responder
}

// NewGroupUsage creates a new http.Handler for the group usage operation
func NewGroupUsage(ctx *middleware.Context, handler GroupUsageHandler) *GroupUsage {
	return &GroupUsage{Context: ctx, Handler: handler}
}

/* GroupUsage swagger:route GET /group/usage api groupUsage

Get the quota usage information for a quota-group.

Given an array of quota-groups, create a mapping of quota-groups to resource usage.

*/
type GroupUsage struct {
	Context *middleware.Context
	Handler GroupUsageHandler
}

func (o *GroupUsage) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGroupUsageParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
