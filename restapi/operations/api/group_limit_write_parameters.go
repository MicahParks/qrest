// Code generated by go-swagger; DO NOT EDIT.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/validate"

	"github.com/MicahParks/qrest/models"
)

// NewGroupLimitWriteParams creates a new GroupLimitWriteParams object
//
// There are no default values defined in the spec.
func NewGroupLimitWriteParams() GroupLimitWriteParams {

	return GroupLimitWriteParams{}
}

// GroupLimitWriteParams contains all the bound params for the group limit write operation
// typically these are obtained from a http.Request
//
// swagger:parameters groupLimitWrite
type GroupLimitWriteParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*The mapping of quota-group names to resource limits.
	  Required: true
	  In: body
	*/
	GroupLimitsMap map[string]models.Limits
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGroupLimitWriteParams() beforehand.
func (o *GroupLimitWriteParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	if runtime.HasBody(r) {
		defer r.Body.Close()
		var body map[string]models.Limits
		if err := route.Consumer.Consume(r.Body, &body); err != nil {
			if err == io.EOF {
				res = append(res, errors.Required("groupLimitsMap", "body", ""))
			} else {
				res = append(res, errors.NewParseError("groupLimitsMap", "body", "", err))
			}
		} else {
			// validate map of body objects
			for k := range body {
				if err := validate.Required(fmt.Sprintf("%s.%v", "groupLimitsMap", k), "body", body[k]); err != nil {
					return err
				}
				if val, ok := body[k]; ok {
					if err := val.Validate(route.Formats); err != nil {
						res = append(res, err)
						break
					}
				}
			}

			if len(res) == 0 {
				o.GroupLimitsMap = body
			}
		}
	} else {
		res = append(res, errors.Required("groupLimitsMap", "body", ""))
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
