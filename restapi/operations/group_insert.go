// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GroupInsertHandlerFunc turns a function with the right signature into a group insert handler
type GroupInsertHandlerFunc func(GroupInsertParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GroupInsertHandlerFunc) Handle(params GroupInsertParams) middleware.Responder {
	return fn(params)
}

// GroupInsertHandler interface for that can handle valid group insert params
type GroupInsertHandler interface {
	Handle(GroupInsertParams) middleware.Responder
}

// NewGroupInsert creates a new http.Handler for the group insert operation
func NewGroupInsert(ctx *middleware.Context, handler GroupInsertHandler) *GroupInsert {
	return &GroupInsert{Context: ctx, Handler: handler}
}

/* GroupInsert swagger:route POST /group/{group} groupInsert

Insert a quota-group.

*/
type GroupInsert struct {
	Context *middleware.Context
	Handler GroupInsertHandler
}

func (o *GroupInsert) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGroupInsertParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
